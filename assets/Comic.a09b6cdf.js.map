{"version":3,"file":"Comic.a09b6cdf.js","sources":["../../src/hooks/chainClickable.tsx","../../src/components/TextBubble/presets.ts","../../src/util/css.ts","../../src/components/TextBubble/TextBubble.tsx","../../src/components/Stick/presets.ts","../../src/components/Stick/Stick.tsx","../../src/components/Comic/presets.ts","../../src/components/Scene/presets.ts","../../src/components/Scene/Scene.tsx","../../src/components/Comic/Comic.tsx"],"sourcesContent":["import React, {ComponentType, MouseEventHandler, SyntheticEvent, useRef} from 'react';\n\nimport {CommonProps} from '@/util/types';\n\nexport function chainClickable<T extends CommonProps>(Component: ComponentType<T>) {\n  const ClickableComponent = (props: T) => {\n    const {onClick} = props;\n    const ref = useRef<HTMLSpanElement>(null);\n    if (!onClick) {\n      return <Component {...props} />;\n    } else {\n      const clickHandler: MouseEventHandler<HTMLSpanElement> = event => {\n        event.preventDefault();\n        event.stopPropagation();\n        !onClick ? () => null : onClick(ref);\n      };\n      return (\n        <span onClick={clickHandler} ref={ref}>\n          <Component {...props} />\n        </span>\n      );\n    }\n  };\n  ClickableComponent.displayName = `clickable(${Component.displayName || Component.name || 'Component'})`;\n  return ClickableComponent;\n}\n\nexport function chainCall(fn: (id?: string) => void) {\n  return function handler(event: SyntheticEvent) {\n    event.stopPropagation();\n    fn();\n  };\n}\n","import {TextBubbleProps} from '@/util/types';\n\nconst DEFAULT_SIZE = '3rem';\n\nexport const Default: Required<TextBubbleProps> = {\n  childProps: [],\n  type: 'text',\n  bgColor: 'transparent',\n  color: '#888888',\n  coord: {\n    x: '0',\n    y: '0',\n  },\n  dimensions: {\n    width: DEFAULT_SIZE,\n    height: DEFAULT_SIZE,\n    thickness: '2px',\n  },\n  id: '',\n  lineStyle: '',\n  onClick: () => null,\n  text: '',\n  font: 'Comic Sans MS, Comic Sans, cursive',\n  fontSize: '1.5rem',\n  fontWeight: 'normal',\n  borderColor: 'transparent',\n  borderRadius: '40%',\n};\n","import {CSSProperties} from 'react';\n\nimport {BaseCSSPropsInput, StickCSSPropsInput, TextProps} from './types';\n\n/**\n * Generate CSS strings\n */\n\n/**\n *\n * @param css Initial css string to wrap\n * @param f factor to multiply by\n * @returns Input wrapped in calc multiplied by the f\n */\nexport const multCss = (css: string, f: number) => `calc(${css} * ${f})`;\n/**\n *\n * @param css Initial css string to wrap\n * @param f factor to divide by (replaces 0 with 1 for safe division)\n * @returns Input wrapped in calc divided by the f\n */\nexport const divCss = (css: string, f: number) => `calc(${css} / ${f || 1})`;\n/**\n *\n * @param varName Name of the CSS var to offset by (omit the --)\n * @returns CSS calc for 100% - the provided var\n */\nexport const offsetVar = (varName: string) => `calc(100% - var(--${varName}))`;\n/**\n *\n * @param angle the numeric angle in degrees\n * @returns CSS string with 'deg' appended to the provided angle\n */\nexport const deg = (angle?: number) => `${angle ?? 0}deg`;\n/**\n *\n * @param angle the numeric angle in degrees\n * @returns CSS string for the rotate transfrom with *deg()* applied to the number to append 'deg'\n */\nexport const rotate = (angle?: number) => `rotate(${deg(angle)})`;\n\n/**\n * Generate CSS-in-JS style objects\n */\n\n/**\n *\n * @param angle In Degrees\n * @returns Input wrapped in calc multiplied by the f\n */\nexport const rotateTransformCSSProp = (angle?: number) =>\n  ({\n    transform: rotate(angle),\n  } as CSSProperties);\n\n/**\n *\n * @param input Subset of StickProps needed for dynamic CSS props\n * @returns CSSProperties object with the inputs processed where needed\n */\nexport const baseCSSProps = (input: BaseCSSPropsInput): CSSProperties => {\n  const {bgColor, color, width, height, thickness} = input;\n  return {\n    ['--w']: width,\n    ['--h']: height,\n    ['--t']: thickness,\n    ['--c']: color,\n    ['--bgc']: bgColor,\n  } as CSSProperties;\n};\n\n/**\n *\n * @param input Subset of StickProps needed for dynamic CSS props\n * @param prefix Prefix of the CSS variable name\n * @returns CSSProperties object with the inputs processed where needed\n */\nexport const anglesCSSProps = (input: number | Array<number>, prefix: string): CSSProperties => {\n  const angles = typeof input === 'number' ? [input] : input.slice(0, 3);\n  const result: CSSProperties = {};\n  angles.forEach((angle: number, idx: number) => {\n    const varName = `--${prefix}-${idx}` as keyof CSSProperties;\n    // TS can't resolve the dynamic variable name\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    result[varName] = deg(angle);\n  });\n  return result;\n};\n\n/**\n *\n * @param input Subset of StickProps needed for dynamic CSS props\n * @returns CSSProperties object with the inputs processed where needed\n */\nexport const stickCSSProps = (input: StickCSSPropsInput): CSSProperties => {\n  const {bgColor, color, width, height, thickness, base, coord, offsets} = input;\n  return {\n    ...baseCSSProps({bgColor, color, width, height, thickness}),\n    ...anglesCSSProps(base ?? 0, 'base'),\n    top: `calc(${coord?.y ?? 0} - ${offsets?.y ?? '0%'})`,\n    left: `calc(${coord?.x ?? 0} - ${offsets?.x ?? '0%'})`,\n  } as CSSProperties;\n};\n\n/**\n *\n * @param input Subset of StickProps needed for dynamic CSS props\n * @returns CSSProperties object with the inputs processed where needed\n */\nexport const textCSSProps = (input: TextProps): CSSProperties => {\n  const {font, fontSize, fontWeight, borderColor, borderRadius} = input;\n  return {\n    ['--f']: font,\n    ['--fs']: fontSize,\n    ['--fw']: fontWeight,\n    ['--bc']: borderColor,\n    ['--br']: borderRadius,\n  } as CSSProperties;\n};\n\n/**\n * Type Caster\n * @param input A map of property name to value, both being freeform strings\n * @returns A cast CSSProperties objects\n */\nexport const arbitraryCSSProps = (input: Record<string, string>): CSSProperties => {\n  return input as CSSProperties;\n};\n","import React, {FC} from 'react';\n\nimport {chainClickable} from '../../hooks/chainClickable';\n\nimport {Default} from './presets';\n\nimport './style.css';\nimport {stickCSSProps, textCSSProps} from '@/util/css';\nimport {TextBubbleProps} from '@/util/types';\n\nconst TextBubble: FC<TextBubbleProps> = (props = Default) => {\n  const {id, font, fontSize, fontWeight, bgColor, borderColor, borderRadius, color, dimensions, coord, text} = props;\n  const {width, height, thickness} = {...Default.dimensions, ...dimensions};\n\n  const stickStyle = stickCSSProps({\n    width,\n    height,\n    thickness,\n    bgColor,\n    color,\n    coord,\n  });\n  const textStyle = textCSSProps({\n    font,\n    fontSize,\n    fontWeight,\n    borderColor,\n    borderRadius,\n  });\n  const bubbleStyle = {\n    ...stickStyle,\n    ...textStyle,\n  };\n\n  return (\n    <div className=\"bubble\" style={bubbleStyle} id={id || undefined}>\n      <div className=\"text\">{text ?? ''}</div>\n    </div>\n  );\n};\n\nexport default chainClickable(TextBubble);\n","import {Dimensions, LimbAngleProps, LimbPosType, PosType, StickPosition, StickProps} from '@/util/types';\n\nconst DEFAULT_STICK_SIZE = '12rem';\n\nexport const LimbAngles: Record<LimbPosType, LimbAngleProps> = {\n  default: {angle: [10, 0, -180]},\n  armPoint: {angle: [75, 15]},\n  armHip: {angle: [75, -85, 10]},\n  armHeadHold: {angle: [110, 80, -30]},\n  legHalfSquat: {angle: [50, -50, 90]},\n};\n\nexport const Default: Required<StickProps> = {\n  childProps: [],\n  children: [],\n  bgColor: 'transparent',\n  color: '#888888',\n  coord: {\n    x: '0',\n    y: '0',\n  },\n  customPos: {\n    limbs: {\n      base: [10, 0, -180],\n    },\n  },\n  dimensions: {\n    width: DEFAULT_STICK_SIZE,\n    height: DEFAULT_STICK_SIZE,\n    thickness: '2px',\n  } as Required<Dimensions>,\n  id: '',\n  lineStyle: '',\n  onClick: () => null,\n  posId: 'default',\n  type: 'stick',\n};\n\nexport const Positions: Record<PosType, StickPosition> = {\n  default: Default.customPos,\n  custom: {},\n  panik: {\n    limbs: {\n      ...Default.customPos.limbs,\n      arms: {\n        left: LimbAngles.armHeadHold,\n        right: LimbAngles.armHeadHold,\n      },\n      legs: {\n        left: LimbAngles.legHalfSquat,\n        right: LimbAngles.legHalfSquat,\n      },\n    },\n    offsets: {\n      x: '0px',\n      y: 'calc(var(--h) / -14)',\n    },\n  },\n  pointL: {\n    limbs: {...Default.customPos.limbs, arms: {left: LimbAngles.armPoint}},\n  },\n  pointR: {\n    limbs: {...Default.customPos.limbs, arms: {right: LimbAngles.armPoint}},\n  },\n  sitL: {\n    limbs: {\n      ...Default.customPos.limbs,\n      legs: {left: {angle: 90}, right: {angle: 90}},\n    },\n    offsets: {x: '0px', y: '-3rem'},\n  },\n  walkL: {},\n  walkR: {},\n};\n","import React, {FC} from 'react';\n\nimport TextBubble from '../TextBubble';\n\nimport {Default, Positions} from './presets';\n\nimport {chainClickable} from '@/hooks/chainClickable';\nimport {anglesCSSProps, arbitraryCSSProps, multCss, rotateTransformCSSProp, stickCSSProps} from '@/util/css';\nimport {LimbAngleProps, StickProps, TextBubbleProps} from '@/util/types';\n\nimport './style.css';\n\n// todo: move to props\nconst animated = false;\n\nconst Stick: FC<StickProps> = (props = Default) => {\n  const {id, bgColor, color, posId, customPos, dimensions, coord, childProps, lineStyle, onClick} = props;\n  const hasCustomPose = posId === 'custom' && customPos;\n  const {limbs, offsets} = !hasCustomPose ? Positions[posId ?? 'custom'] : customPos;\n  const {width, height, thickness} = {...Default.dimensions, ...dimensions};\n  const {base = 0, arms, legs} = {...Default.customPos.limbs, ...limbs};\n\n  const stickStyle = stickCSSProps({\n    width,\n    height,\n    thickness,\n    bgColor,\n    color,\n    base,\n    offsets,\n    coord,\n  });\n\n  const renderLimb = (p?: LimbAngleProps) => {\n    const angleProps = p?.angle;\n    // todo: fix animation when implemented or use @Property instead\n    const rotateTransform = animated && typeof angleProps === 'number' ? rotateTransformCSSProp(angleProps) : {};\n    const angleVariables = angleProps ? anglesCSSProps(angleProps, 'angle') : {};\n    return (\n      <div style={{...rotateTransform, ...angleVariables}}>\n        <div>\n          <div />\n        </div>\n      </div>\n    );\n  };\n\n  const bodyStyle = lineStyle === 'sketch' && thickness ? arbitraryCSSProps({['--t']: multCss(thickness, 1.75)}) : {};\n\n  return (\n    <div className={`${lineStyle ?? ''} stick`} style={stickStyle} id={id || undefined}>\n      <div className=\"head\"></div>\n      <div className=\"body\" style={bodyStyle}>\n        <div className=\"arms\">\n          {renderLimb(arms?.left)}\n          {renderLimb(arms?.right)}\n        </div>\n        <div className=\"legs\">\n          {renderLimb(legs?.left)}\n          {renderLimb(legs?.right)}\n        </div>\n      </div>\n      {childProps?.map((child, idx) => {\n        const {type} = child;\n        let ChildComponent = null;\n        switch (type) {\n          case 'stick':\n            ChildComponent = Stick;\n            return;\n          case 'text':\n            ChildComponent = TextBubble;\n            break;\n          default:\n            break;\n        }\n        return (\n          ChildComponent && (\n            <ChildComponent onClick={onClick} {...(child as TextBubbleProps)} key={`stickchild-${idx}`} />\n          )\n        );\n      })}\n    </div>\n  );\n};\n\nexport default chainClickable(Stick);\n","import {StickPresets} from '@/components/Stick';\nimport {ComicProps} from '@/util/types';\n\nconst DEFAULT_COMIC_SIZE = '50vmin';\n\nexport const Default: Required<ComicProps> = {\n  childProps: [],\n  color: StickPresets.Default.color,\n  type: 'comic',\n  bgColor: 'transparent',\n  coord: {\n    x: '0',\n    y: '0',\n  },\n  dimensions: {\n    width: DEFAULT_COMIC_SIZE,\n    height: DEFAULT_COMIC_SIZE,\n    thickness: StickPresets.Default.dimensions.thickness,\n  },\n  id: '',\n  lineStyle: '',\n  onClick: () => null,\n  scenes: [],\n  layout: [],\n};\n","import {StickPresets} from '@/components/Stick';\nimport {divCss, offsetVar} from '@/util/css';\nimport {Coordinates, SceneProps} from '@/util/types';\n\nconst DEFAULT_SCENE_SIZE = '100%';\n\nexport const Default: Required<SceneProps> = {\n  childProps: [],\n  type: 'scene',\n  bgColor: 'transparent',\n  coord: {\n    x: '0',\n    y: '0',\n  },\n  color: StickPresets.Default.color,\n  dimensions: {\n    width: DEFAULT_SCENE_SIZE,\n    height: DEFAULT_SCENE_SIZE,\n    thickness: StickPresets.Default.dimensions.thickness,\n  },\n  id: '',\n  lineStyle: '',\n  onClick: () => null,\n  sticks: [],\n};\n\nconst H = 'h';\nconst W = 'w';\nconst OP = '0%';\n\nexport const Directions: Record<string, Coordinates> = {\n  C: {\n    x: divCss(offsetVar(W), 2),\n    y: divCss(offsetVar(H), 2),\n  },\n  SW: {\n    x: OP,\n    y: offsetVar(H),\n  },\n  W: {\n    x: OP,\n    y: divCss(offsetVar(H), 2),\n  },\n  NW: {\n    x: OP,\n    y: OP,\n  },\n  N: {\n    x: divCss(offsetVar(W), 2),\n    y: OP,\n  },\n  NE: {\n    x: offsetVar(W),\n    y: OP,\n  },\n  E: {\n    x: offsetVar(W),\n    y: divCss(offsetVar(H), 2),\n  },\n  SE: {\n    x: offsetVar(W),\n    y: offsetVar(H),\n  },\n  S: {\n    x: divCss(offsetVar(W), 2),\n    y: offsetVar(H),\n  },\n};\n","import React, {FC} from 'react';\n\nimport {Default} from './presets';\n\nimport './style.css';\nimport Stick from '@/components/Stick';\nimport {baseCSSProps} from '@/util/css';\nimport {SceneProps, StickProps} from '@/util/types';\nimport {chainClickable} from '@/hooks/chainClickable';\n\nconst Scene: FC<SceneProps> = ({id = 'scene', bgColor, childProps, color, dimensions, lineStyle, sticks, onClick}) => {\n  const {width, height, thickness} = dimensions ?? Default.dimensions;\n\n  const sceneStyle = baseCSSProps({\n    width,\n    height,\n    thickness,\n    bgColor,\n    color,\n  });\n\n  return (\n    <div className={`${lineStyle ?? ''} scene`} style={sceneStyle} id={id || undefined}>\n      {[...(childProps ?? []), ...(sticks ?? [])]\n        ?.filter(({type}) => type === 'stick')\n        .map((sp, idx) => {\n          const stickProps = {bgColor, color, lineStyle, ...sp} as StickProps;\n          return <Stick {...stickProps} onClick={onClick} key={`stick-${idx}-${stickProps.id}`} />;\n        })}\n    </div>\n  );\n};\n\nexport default chainClickable(Scene);\n","import React, {FC, useMemo} from 'react';\n\nimport {Default} from './presets';\n\nimport './style.css';\nimport Scene from '@/components/Scene';\nimport {baseCSSProps, divCss, multCss} from '@/util/css';\nimport {ComicProps} from '@/util/types';\nimport {chainClickable} from '@/hooks/chainClickable';\n\nconst Comic: FC<ComicProps> = ({\n  id = 'comic',\n  bgColor,\n  childProps,\n  color,\n  dimensions,\n  layout,\n  lineStyle,\n  onClick,\n  scenes,\n}) => {\n  const {width, height, thickness} = dimensions ?? Default.dimensions;\n\n  const comicStyle = baseCSSProps({\n    width,\n    height,\n    thickness,\n    bgColor,\n    color,\n  });\n\n  const panels = useMemo(() => {\n    const normalized = layout\n      .map(r => {\n        const total = r.reduce((t, n) => t + n, 0);\n        return r.map(ogN => ogN / (total || 1));\n      })\n      .flat();\n\n    const sceneChildren = childProps?.filter(({type}) => type === 'scene');\n\n    return (\n      <div className=\"row\">\n        {normalized.map((nf, idx) => {\n          const sp = [...(sceneChildren ?? []), ...(scenes ?? [])][idx];\n          const normalizedProps = sp\n            ? {\n                bgColor,\n                color,\n                lineStyle,\n                ...sp,\n                dimensions: {\n                  thickness,\n                  ...sp.dimensions,\n                  width: multCss('100%', nf),\n                  height: divCss(dimensions?.height ?? '', layout.length || 1),\n                },\n              }\n            : undefined;\n          return normalizedProps && <Scene key={`scene-${idx}`} onClick={onClick} {...normalizedProps} />;\n        })}\n      </div>\n    );\n  }, [dimensions?.height, layout, scenes]);\n\n  return (\n    <div className={`${lineStyle ?? ''} comic`} style={comicStyle} id={id || undefined}>\n      {panels}\n    </div>\n  );\n};\n\nexport default chainClickable(Comic);\n"],"names":["chainClickable","Component","ClickableComponent","props","onClick","ref","useRef","_jsx","event","clickHandler","chainCall","fn","DEFAULT_SIZE","Default","multCss","css","f","divCss","offsetVar","varName","deg","angle","baseCSSProps","input","bgColor","color","width","height","thickness","anglesCSSProps","prefix","angles","result","idx","stickCSSProps","base","coord","offsets","_a","_b","_c","_d","textCSSProps","font","fontSize","fontWeight","borderColor","borderRadius","arbitraryCSSProps","TextBubble","id","dimensions","text","stickStyle","textStyle","bubbleStyle","undefined","TextBubble$1","DEFAULT_STICK_SIZE","LimbAngles","Positions","Stick","posId","customPos","childProps","lineStyle","hasCustomPose","limbs","arms","legs","renderLimb","p","angleProps","rotateTransform","angleVariables","bodyStyle","_jsxs","child","type","ChildComponent","_createElement","Stick$1","DEFAULT_COMIC_SIZE","StickPresets.Default","DEFAULT_SCENE_SIZE","H","W","OP","Directions","Scene","sticks","sceneStyle","stickProps","sp","Scene$1","Comic","layout","comicStyle","panels","useMemo","normalized","r","total","t","n","ogN","sceneChildren","nf","scenes","normalizedProps","Comic$1"],"mappings":"6FAIO,SAAAA,EAAAC,EAAA,CACL,MAAAC,EAAAC,GAAA,CACE,KAAA,CAAM,QAAAC,CAACA,EAAAA,EACPC,EAAAC,iBAAA,IAAA,EACA,OAAAF,EAQEG,EAAA,OAAA,CACE,QANFC,GAAA,CACEA,EAAAA,eAAAA,EACAA,EAAAA,gBAAAA,EACAJ,GAAAA,EAAAC,CAAA,CAAmC,EAGpBI,IAAAA,EAAc,SAAAF,EAAAN,EAAA,CACjB,GAAAE,CAAKA,CAAAA,CAAK,CAAA,EATxBI,EAAAN,EAAA,CAAiB,GAAAE,CAAKA,CAAAA,CAYxB,EAEFD,OAAAA,EAAAA,YAAAA,aAAAA,EAAAA,aAAAA,EAAAA,MAAAA,eACAA,CACF,CAEO,SAAAQ,EAAAC,EAAA,CACL,OAAA,SAAAH,EAAA,CACEA,EAAAA,gBAAAA,EACAG,GAAI,CAER,4mBC9BA,MAAMC,EAAe,OAERC,EAAqC,CAChD,WAAY,CAAC,EACb,KAAM,OACN,QAAS,cACT,MAAO,UACP,MAAO,CACL,EAAG,IACH,EAAG,GACL,EACA,WAAY,CACV,MAAOD,EACP,OAAQA,EACR,UAAW,KACb,EACA,GAAI,GACJ,UAAW,GACX,QAAS,IAAM,KACf,KAAM,GACN,KAAM,qCACN,SAAU,SACV,WAAY,SACZ,YAAa,cACb,aAAc,KAChB,ECbO,MAAME,EAAU,CAACC,EAAaC,IAAc,QAAQD,OAASC,KAOvDC,EAAS,CAACF,EAAaC,IAAc,QAAQD,OAASC,GAAK,KAM3DE,EAAaC,GAAoB,qBAAqBA,MAMtDC,EAAOC,GAAmB,GAAGA,GAAA,KAAAA,EAAS,OA2BtCC,EAAgBC,GAA4C,CACvE,KAAM,CAAC,QAAAC,EAAS,MAAAC,EAAO,MAAAC,EAAO,OAAAC,EAAQ,UAAAC,CAAa,EAAAL,EAC5C,MAAA,CACL,CAAC,OAAQG,EACT,CAAC,OAAQC,EACT,CAAC,OAAQC,EACT,CAAC,OAAQH,EACT,CAAC,SAAUD,CAAA,CAEf,EAQaK,EAAiB,CAACN,EAA+BO,IAAkC,CACxF,MAAAC,EAAS,OAAOR,GAAU,SAAW,CAACA,CAAK,EAAIA,EAAM,MAAM,EAAG,CAAC,EAC/DS,EAAwB,CAAA,EACvB,OAAAD,EAAA,QAAQ,CAACV,EAAeY,IAAgB,CACvC,MAAAd,EAAU,KAAKW,KAAUG,IAIxBD,EAAAb,GAAWC,EAAIC,CAAK,CAAA,CAC5B,EACMW,CACT,EAOaE,EAAiBX,GAA6C,aACnE,KAAA,CAAC,QAAAC,EAAS,MAAAC,EAAO,MAAAC,EAAO,OAAAC,EAAQ,UAAAC,EAAW,KAAAO,EAAM,MAAAC,EAAO,QAAAC,CAAW,EAAAd,EAClE,MAAA,CACL,GAAGD,EAAa,CAAC,QAAAE,EAAS,MAAAC,EAAO,MAAAC,EAAO,OAAAC,EAAQ,UAAAC,EAAU,EAC1D,GAAGC,EAAeM,GAAA,KAAAA,EAAQ,EAAG,MAAM,EACnC,IAAK,SAAQG,EAAAF,GAAA,YAAAA,EAAO,IAAP,KAAAE,EAAY,QAAOC,EAAAF,GAAA,YAAAA,EAAS,IAAT,KAAAE,EAAc,QAC9C,KAAM,SAAQC,EAAAJ,GAAA,YAAAA,EAAO,IAAP,KAAAI,EAAY,QAAOC,EAAAJ,GAAA,YAAAA,EAAS,IAAT,KAAAI,EAAc,OAAA,CAEnD,EAOaC,EAAgBnB,GAAoC,CAC/D,KAAM,CAAC,KAAAoB,EAAM,SAAAC,EAAU,WAAAC,EAAY,YAAAC,EAAa,aAAAC,CAAgB,EAAAxB,EACzD,MAAA,CACL,CAAC,OAAQoB,EACT,CAAC,QAASC,EACV,CAAC,QAASC,EACV,CAAC,QAASC,EACV,CAAC,QAASC,CAAA,CAEd,EAOaC,GAAqBzB,GACzBA,ECrHT0B,EAAA,CAAA9C,EAAAU,IAAA,CACE,KAAA,CAAM,GAAAqC,EAACA,KAAAA,EAAIP,SAAAA,EAAMC,WAAAA,EAAUC,QAAAA,EAAYrB,YAAAA,EAASsB,aAAAA,EAAaC,MAAAA,EAActB,WAAAA,EAAO0B,MAAAA,EAAYf,KAAAA,CAAOgB,EAAAA,EACrG,CAAM,MAAA1B,EAACA,OAAAA,EAAOC,UAAAA,CAAQC,EAAAA,CAAa,GAAAf,EAAA,WAAYsC,GAAAA,CAAeA,EAE9DE,EAAAnB,EAAA,CAAiC,MAAAR,EAC/BA,OAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAJ,MAAAA,EACAC,MAAAA,CACAW,CAAAA,EAEFkB,EAAAZ,EAAA,CAA+B,KAAAC,EAC7BA,SAAAA,EACAC,WAAAA,EACAC,YAAAA,EACAC,aAAAA,CACAC,CAAAA,EAEFQ,EAAA,CAAoB,GAAAF,EACfA,GAAAA,CACAC,EAGL,OAAA/C,EAAA,MAAA,CACE,UAAA,SAAe,MAAAgD,EAAgBA,GAAAA,GAAAA,OAAuBC,SAAAA,EAAAA,MAAAA,CACpD,UAAA,OAAe,SAAAJ,GAAA,KAAAA,EAAA,EAAgB,CAAA,CAAE,CAAA,CAGvC,EAEAK,GAAAzD,EAAAiD,CAAA;;2tDCvCA,MAAMS,EAAqB,QAEdC,EAAkD,CAC7D,QAAS,CAAC,MAAO,CAAC,GAAI,EAAG,IAAI,CAAC,EAC9B,SAAU,CAAC,MAAO,CAAC,GAAI,EAAE,CAAC,EAC1B,OAAQ,CAAC,MAAO,CAAC,GAAI,IAAK,EAAE,CAAC,EAC7B,YAAa,CAAC,MAAO,CAAC,IAAK,GAAI,GAAG,CAAC,EACnC,aAAc,CAAC,MAAO,CAAC,GAAI,IAAK,EAAE,CAAC,CACrC,EAEa9C,EAAgC,CAC3C,WAAY,CAAC,EACb,SAAU,CAAC,EACX,QAAS,cACT,MAAO,UACP,MAAO,CACL,EAAG,IACH,EAAG,GACL,EACA,UAAW,CACT,MAAO,CACL,KAAM,CAAC,GAAI,EAAG,IAAI,CACpB,CACF,EACA,WAAY,CACV,MAAO6C,EACP,OAAQA,EACR,UAAW,KACb,EACA,GAAI,GACJ,UAAW,GACX,QAAS,IAAM,KACf,MAAO,UACP,KAAM,OACR,EAEaE,GAA4C,CACvD,QAAS/C,EAAQ,UACjB,OAAQ,CAAC,EACT,MAAO,CACL,MAAO,CACL,GAAGA,EAAQ,UAAU,MACrB,KAAM,CACJ,KAAM8C,EAAW,YACjB,MAAOA,EAAW,WACpB,EACA,KAAM,CACJ,KAAMA,EAAW,aACjB,MAAOA,EAAW,YACpB,CACF,EACA,QAAS,CACP,EAAG,MACH,EAAG,sBACL,CACF,EACA,OAAQ,CACN,MAAO,CAAC,GAAG9C,EAAQ,UAAU,MAAO,KAAM,CAAC,KAAM8C,EAAW,SAAS,CACvE,EACA,OAAQ,CACN,MAAO,CAAC,GAAG9C,EAAQ,UAAU,MAAO,KAAM,CAAC,MAAO8C,EAAW,SAAS,CACxE,EACA,KAAM,CACJ,MAAO,CACL,GAAG9C,EAAQ,UAAU,MACrB,KAAM,CAAC,KAAM,CAAC,MAAO,EAAE,EAAG,MAAO,CAAC,MAAO,GAAG,CAC9C,EACA,QAAS,CAAC,EAAG,MAAO,EAAG,OAAO,CAChC,EACA,MAAO,CAAC,EACR,MAAO,CAAC,CACV,EC1DA,MAAAgD,EAAA,CAAA1D,EAAAU,IAAA,CACE,KAAA,CAAM,GAAAqC,EAACA,QAAAA,EAAI1B,MAAAA,EAASC,MAAAA,EAAOqC,UAAAA,EAAOC,WAAAA,EAAWZ,MAAAA,EAAYf,WAAAA,EAAO4B,UAAAA,EAAYC,QAAAA,CAAW7D,EAAAA,EACvF8D,EAAAJ,IAAA,UAAAC,EACA,CAAM,MAAAI,EAACA,QAAAA,CAAO9B,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,KAAAA,EAAAA,UACd,CAAM,MAAAX,EAACA,OAAAA,EAAOC,UAAAA,CAAQC,EAAAA,CAAa,GAAAf,EAAA,WAAYsC,GAAAA,CAAeA,EAC9D,CAAM,KAAAhB,EAAA,EAAQ,KAAAiC,EAAGA,KAAAA,CAAMC,EAAAA,CAAQ,GAAAxD,EAAA,UAAA,MAAsBsD,GAAAA,CAAUA,EAE/Dd,EAAAnB,EAAA,CAAiC,MAAAR,EAC/BA,OAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAJ,MAAAA,EACAC,KAAAA,EACAU,QAAAA,EACAE,MAAAA,CACAD,CAAAA,EAGFkC,EAAAC,GAAA,CACE,MAAAC,EAAAD,GAAA,YAAAA,EAAA,MAEAE,EAAA,CAAA,EACAC,EAAAF,EAAA3C,EAAA2C,EAAA,OAAA,EAAA,GACA,OAAAjE,EAAA,MAAA,CACE,MAAA,CAAY,GAAAkE,EAAIA,GAAAA,CAAoBC,EAAc,SAAAnE,EAAA,MAAA,CAChD,SAAAA,EAAA,MAAA,EAAA,CACE,CAAA,CAAO,CAAA,CAEL,EAIVoE,EAAAV,IAAA,UAAArC,EAAAoB,GAAA,CAA0E,CAAA,OAAAlC,EAAAc,EAAA,IAAA,CAAiC,CAAA,EAAA,CAAA,EAE3G,OAAAgD,EAAA,MAAA,CACE,UAAA,GAAAX,GAAA,KAAAA,EAAA,WAAgC,MAAAZ,EAAmBA,GAAAA,GAAAA,OAAsBG,SAAAA,CAAAA,EAAAA,MAAAA,CACvE,UAAA,MAAe,CAAA,EAAAoB,EAAA,MAAA,CACf,UAAA,OAAe,MAAAD,EAAcA,SAAAA,CAAAA,EAAAA,MAAAA,CAC3B,UAAA,OAAe,SAAA,CAAAL,EAAAF,GAAA,YAAAA,EAAA,IAAA,EAAAE,EAAAF,GAAA,YAAAA,EAAA,KAAA,CAAA,CAEW,CAAA,EAAAQ,EAAA,MAAA,CAE1B,UAAA,OAAe,SAAA,CAAAN,EAAAD,GAAA,YAAAA,EAAA,IAAA,EAAAC,EAAAD,GAAA,YAAAA,EAAA,KAAA,CAAA,CAEW,CAAA,CAAA,CACpB,CAAA,EAAAL,GAAA,YAAAA,EAAA,IAAA,CAAAa,EAAA5C,IAAA,CAGN,KAAA,CAAM,KAAA6C,CAACA,EAAAA,EACP,IAAAC,EAAA,KACA,OAAAD,EAAA,CAAY,IAAA,QAERC,EAAAA,EACA,OAAA,IAAA,OAEAA,EAAAA,GACA,KAEA,CAEJ,OAAAA,GAAAC,EAAA,QAAA,cAAAD,EAAA,CAEmB,QAAA3E,EAAC,GAAAyE,EAAuBA,IAAAA,cAAAA,GAA8C5C,CAAAA,CACtF,EAAA,CAEH,CAAA,CAGR,EAEAgD,GAAAjF,EAAA6D,CAAA;;ijDClFA,MAAMqB,EAAqB,SAEdrE,GAAgC,CAC3C,WAAY,CAAC,EACb,MAAOsE,EAAqB,MAC5B,KAAM,QACN,QAAS,cACT,MAAO,CACL,EAAG,IACH,EAAG,GACL,EACA,WAAY,CACV,MAAOD,EACP,OAAQA,EACR,UAAWC,EAAqB,WAAW,SAC7C,EACA,GAAI,GACJ,UAAW,GACX,QAAS,IAAM,KACf,OAAQ,CAAC,EACT,OAAQ,CAAC,CACX,ECpBA,MAAMC,EAAqB,OAEdvE,GAAgC,CAC3C,WAAY,CAAC,EACb,KAAM,QACN,QAAS,cACT,MAAO,CACL,EAAG,IACH,EAAG,GACL,EACA,MAAOsE,EAAqB,MAC5B,WAAY,CACV,MAAOC,EACP,OAAQA,EACR,UAAWD,EAAqB,WAAW,SAC7C,EACA,GAAI,GACJ,UAAW,GACX,QAAS,IAAM,KACf,OAAQ,CAAC,CACX,EAEME,EAAI,IACJC,EAAI,IACJC,EAAK,KAEEC,GAA0C,CACrD,EAAG,CACD,EAAGvE,EAAOC,EAAUoE,CAAC,EAAG,CAAC,EACzB,EAAGrE,EAAOC,EAAUmE,CAAC,EAAG,CAAC,CAC3B,EACA,GAAI,CACF,EAAGE,EACH,EAAGrE,EAAUmE,CAAC,CAChB,EACA,EAAG,CACD,EAAGE,EACH,EAAGtE,EAAOC,EAAUmE,CAAC,EAAG,CAAC,CAC3B,EACA,GAAI,CACF,EAAGE,EACH,EAAGA,CACL,EACA,EAAG,CACD,EAAGtE,EAAOC,EAAUoE,CAAC,EAAG,CAAC,EACzB,EAAGC,CACL,EACA,GAAI,CACF,EAAGrE,EAAUoE,CAAC,EACd,EAAGC,CACL,EACA,EAAG,CACD,EAAGrE,EAAUoE,CAAC,EACd,EAAGrE,EAAOC,EAAUmE,CAAC,EAAG,CAAC,CAC3B,EACA,GAAI,CACF,EAAGnE,EAAUoE,CAAC,EACd,EAAGpE,EAAUmE,CAAC,CAChB,EACA,EAAG,CACD,EAAGpE,EAAOC,EAAUoE,CAAC,EAAG,CAAC,EACzB,EAAGpE,EAAUmE,CAAC,CAChB,CACF,ECzDA,MAAAI,EAAA,CAAA,CAA+B,GAAAvC,EAAA,QAAM,QAAA1B,EAASA,WAAAA,EAASwC,MAAAA,EAAYvC,WAAAA,EAAO0B,UAAAA,EAAYc,OAAAA,EAAWyB,QAAAA,CAAe,IAAA,CAC9G,KAAA,CAAM,MAAAhE,EAACA,OAAAA,EAAOC,UAAAA,CAAQC,EAAAA,GAAAA,KAAAA,EAAAA,GAAAA,WAEtB+D,EAAArE,EAAA,CAAgC,MAAAI,EAC9BA,OAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAJ,MAAAA,CACAC,CAAAA,EAGF,OAAAlB,EAAA,MAAA,CACE,UAAA,GAAA0D,GAAA,KAAAA,EAAA,WAAgC,MAAA0B,EAAmBA,GAAAA,GAAAA,OAAsBnC,SAAAA,CAAAA,GAAAA,GAAAA,KAAAA,EAAAA,CAAAA,EAAAA,GAAAA,GAAAA,KAAAA,EAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA,CAE3D,KAAAsB,CAACA,IAAAA,IAAAA,OAAAA,EAAAA,IAAAA,CAAAA,EAAAA,IAAAA,CAET,MAAAc,EAAA,CAAmB,QAAApE,EAACA,MAAAA,EAASC,UAAAA,EAAOwC,GAAAA,CAAc4B,EAClD,OAAAb,EAAAA,QAAAA,cAAAnB,GAAA,CAAa,GAAA+B,EAAKA,QAAAA,EAAY,IAAA,SAAA3D,KAAA2D,EAAA,IAAkD1C,CAAAA,CAAQ,CAAA,CACzF,CAAA,CAGT,EAEA4C,GAAA9F,EAAAyF,CAAA;;ioCCvBA,MAAAM,EAAA,CAAA,CAA+B,GAAA7C,EAAA,QACxB,QAAA1B,EACLA,WAAAA,EACAwC,MAAAA,EACAvC,WAAAA,EACA0B,OAAAA,EACA6C,UAAAA,EACA/B,QAAAA,EACA7D,OAAAA,CAEF,IAAA,CACE,KAAA,CAAM,MAAAsB,EAACA,OAAAA,EAAOC,UAAAA,CAAQC,EAAAA,GAAAA,KAAAA,EAAAA,GAAAA,WAEtBqE,EAAA3E,EAAA,CAAgC,MAAAI,EAC9BA,OAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAJ,MAAAA,CACAC,CAAAA,EAGFyE,EAAAC,EAAAA,QAAAA,QAAA,IAAA,CACE,MAAAC,EAAAJ,EAAA,IAAAK,GAAA,CAEI,MAAAC,EAAAD,EAAA,OAAA,CAAAE,EAAAC,IAAAD,EAAAC,EAAA,CAAA,EACA,OAAAH,EAAA,IAAAI,GAAAA,GAAAH,GAAA,EAAA,CAAsC,CAAA,EAAA,KAAA,EAI1CI,EAAA1C,GAAA,YAAAA,EAAA,OAAA,CAAA,CAA0C,KAAAc,CAACA,IAAAA,IAAAA,SAE3C,OAAAvE,EAAA,MAAA,CACE,UAAA,MAAe,SAAA6F,EAAA,IAAA,CAAAO,EAAA1E,IAAA,OAEX,MAAA4D,EAAA,CAAA,GAAAa,GAAA,KAAAA,EAAA,CAAA,EAAA,GAAAE,GAAA,KAAAA,EAAA,CAAA,CAAA,EAAA3E,GACA4E,EAAAhB,EAAA,CACI,QAAArE,EACEA,MAAAA,EACAC,UAAAA,EACAwC,GAAAA,EACG4B,WAAAA,CACS,UAAAjE,EACVA,GAAAA,EAAAA,WACMuB,MAAAA,EAAAA,OAAAA,CAAAA,EACmB,OAAAlC,GAAAqB,EAAAa,GAAA,YAAAA,EAAA,SAAA,KAAAb,EAAA,GAAA0D,EAAA,QAAA,CAAA,CACkC,CAC7D,EAAA,OAGN,OAAAa,GAAAtG,EAAAkF,GAAA,CAAgC,QAAArF,EAAsB,GAAAyG,CAAsBA,EAAAA,SAAAA,GAAAA,CAAxB,CAAA,CACrD,CAAA,CACG,EAAA,CAAA1D,GAAA,YAAAA,EAAA,OAAA6C,EAAAY,CAAA,CAAA,EAIV,OAAArG,EAAA,MAAA,CACE,UAAA,GAAA0D,GAAA,KAAAA,EAAA,WAAgC,MAAAgC,EAAmBA,GAAAA,GAAAA,OAAsBzC,SAAAA,CACtE0C,CAAAA,CAGP,EAEAY,GAAA9G,EAAA+F,CAAA;;;;;;"}