{"version":3,"file":"Comic.b3d7fe4f.js","sources":["../../src/hooks/chainClickable.tsx","../../src/components/TextBubble/presets.ts","../../src/util/css.ts","../../src/components/TextBubble/TextBubble.tsx","../../src/components/Stick/presets.ts","../../src/components/Stick/Stick.tsx","../../src/components/Comic/presets.ts","../../src/components/Scene/presets.ts","../../src/components/Scene/Scene.tsx","../../src/components/Comic/Comic.tsx"],"sourcesContent":["import React, {ComponentType, SyntheticEvent} from 'react';\n\nimport {CommonProps} from '@/util/types';\n\nexport function chainClickable<T extends CommonProps>(Component: ComponentType<T>) {\n  const ClickableComponent = (props: T) => {\n    const {id, onClick} = props;\n    const clickHandler = (childID?: string) => {\n      !onClick ? () => null : onClick([id, childID].join('|'));\n    };\n    return <Component {...props} onClick={clickHandler} />;\n  };\n  ClickableComponent.displayName = `clickable(${Component.displayName || Component.name || 'Component'})`;\n  return ClickableComponent;\n}\n\nexport function chainCall(fn: (id?: string) => void) {\n  return function handler(event: SyntheticEvent) {\n    event.stopPropagation();\n    fn();\n  };\n}\n","import {TextBubbleProps} from '@/util/types';\n\nconst DEFAULT_SIZE = '3rem';\n\nexport const Default: Required<TextBubbleProps> = {\n  childProps: [],\n  type: 'text',\n  bgColor: 'transparent',\n  color: '#888888',\n  coord: {\n    x: '0',\n    y: '0',\n  },\n  dimensions: {\n    width: DEFAULT_SIZE,\n    height: DEFAULT_SIZE,\n    thickness: '2px',\n  },\n  id: 'text bubble',\n  lineStyle: '',\n  onClick: () => null,\n  text: '',\n  font: 'Comic Sans MS, Comic Sans, cursive',\n  fontSize: '1.5rem',\n  fontWeight: 'normal',\n  borderColor: 'transparent',\n  borderRadius: '40%',\n};\n","import {CSSProperties} from 'react';\n\nimport {BaseCSSPropsInput, StickCSSPropsInput, TextProps} from './types';\n\n/**\n * Generate CSS strings\n */\n\n/**\n *\n * @param css Initial css string to wrap\n * @param f factor to multiply by\n * @returns Input wrapped in calc multiplied by the f\n */\nexport const multCss = (css: string, f: number) => `calc(${css} * ${f})`;\n/**\n *\n * @param css Initial css string to wrap\n * @param f factor to divide by (replaces 0 with 1 for safe division)\n * @returns Input wrapped in calc divided by the f\n */\nexport const divCss = (css: string, f: number) => `calc(${css} / ${f || 1})`;\n/**\n *\n * @param varName Name of the CSS var to offset by (omit the --)\n * @returns CSS calc for 100% - the provided var\n */\nexport const offsetVar = (varName: string) => `calc(100% - var(--${varName}))`;\n/**\n *\n * @param angle the numeric angle in degrees\n * @returns CSS string with 'deg' appended to the provided angle\n */\nexport const deg = (angle?: number) => `${angle ?? 0}deg`;\n/**\n *\n * @param angle the numeric angle in degrees\n * @returns CSS string for the rotate transfrom with *deg()* applied to the number to append 'deg'\n */\nexport const rotate = (angle?: number) => `rotate(${deg(angle)})`;\n\n/**\n * Generate CSS-in-JS style objects\n */\n\n/**\n *\n * @param angle In Degrees\n * @returns Input wrapped in calc multiplied by the f\n */\nexport const rotateTransformCSSProp = (angle?: number) =>\n  ({\n    transform: rotate(angle),\n  } as CSSProperties);\n\n/**\n *\n * @param input Subset of StickProps needed for dynamic CSS props\n * @returns CSSProperties object with the inputs processed where needed\n */\nexport const baseCSSProps = (input: BaseCSSPropsInput): CSSProperties => {\n  const {bgColor, color, width, height, thickness} = input;\n  return {\n    ['--w']: width,\n    ['--h']: height,\n    ['--t']: thickness,\n    ['--c']: color,\n    ['--bgc']: bgColor,\n  } as CSSProperties;\n};\n\n/**\n *\n * @param input Subset of StickProps needed for dynamic CSS props\n * @param prefix Prefix of the CSS variable name\n * @returns CSSProperties object with the inputs processed where needed\n */\nexport const anglesCSSProps = (input: number | Array<number>, prefix: string): CSSProperties => {\n  const angles = typeof input === 'number' ? [input] : input.slice(0, 3);\n  const result: CSSProperties = {};\n  angles.forEach((angle: number, idx: number) => {\n    const varName = `--${prefix}-${idx}` as keyof CSSProperties;\n    // TS can't resolve the dynamic variable name\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    result[varName] = deg(angle);\n  });\n  return result;\n};\n\n/**\n *\n * @param input Subset of StickProps needed for dynamic CSS props\n * @returns CSSProperties object with the inputs processed where needed\n */\nexport const stickCSSProps = (input: StickCSSPropsInput): CSSProperties => {\n  const {bgColor, color, width, height, thickness, base, coord, offsets} = input;\n  return {\n    ...baseCSSProps({bgColor, color, width, height, thickness}),\n    ...anglesCSSProps(base ?? 0, 'base'),\n    top: `calc(${coord?.y ?? 0} - ${offsets?.y ?? '0%'})`,\n    left: `calc(${coord?.x ?? 0} - ${offsets?.x ?? '0%'})`,\n  } as CSSProperties;\n};\n\n/**\n *\n * @param input Subset of StickProps needed for dynamic CSS props\n * @returns CSSProperties object with the inputs processed where needed\n */\nexport const textCSSProps = (input: TextProps): CSSProperties => {\n  const {font, fontSize, fontWeight, borderColor, borderRadius} = input;\n  return {\n    ['--f']: font,\n    ['--fs']: fontSize,\n    ['--fw']: fontWeight,\n    ['--bc']: borderColor,\n    ['--br']: borderRadius,\n  } as CSSProperties;\n};\n\n/**\n * Type Caster\n * @param input A map of property name to value, both being freeform strings\n * @returns A cast CSSProperties objects\n */\nexport const arbitraryCSSProps = (input: Record<string, string>): CSSProperties => {\n  return input as CSSProperties;\n};\n","import React, {FC} from 'react';\n\nimport {chainCall, chainClickable} from '../../hooks/chainClickable';\n\nimport {Default} from './presets';\n\nimport './style.css';\nimport {stickCSSProps, textCSSProps} from '@/util/css';\nimport {TextBubbleProps} from '@/util/types';\n\nconst TextBubble: FC<TextBubbleProps> = (props = Default) => {\n  const {font, fontSize, fontWeight, bgColor, borderColor, borderRadius, color, dimensions, coord, text, onClick} =\n    props;\n  const {width, height, thickness} = {...Default.dimensions, ...dimensions};\n\n  const stickStyle = stickCSSProps({\n    width,\n    height,\n    thickness,\n    bgColor,\n    color,\n    coord,\n  });\n  const textStyle = textCSSProps({\n    font,\n    fontSize,\n    fontWeight,\n    borderColor,\n    borderRadius,\n  });\n  const bubbleStyle = {\n    ...stickStyle,\n    ...textStyle,\n  };\n\n  return (\n    <div className=\"bubble\" style={bubbleStyle} onClick={chainCall(onClick)}>\n      <div className=\"text\">{text ?? ''}</div>\n    </div>\n  );\n};\n\nexport default chainClickable(TextBubble);\n","import {Dimensions, PosType, StickPosition, StickProps} from '@/util/types';\n\nconst DEFAULT_STICK_SIZE = '12rem';\n\nexport const Default: Required<StickProps> = {\n  childProps: [],\n  children: [],\n  bgColor: 'transparent',\n  color: '#888888',\n  coord: {\n    x: '0',\n    y: '0',\n  },\n  customPos: {\n    limbs: {\n      base: 10,\n    },\n  },\n  dimensions: {\n    width: DEFAULT_STICK_SIZE,\n    height: DEFAULT_STICK_SIZE,\n    thickness: '2px',\n  } as Required<Dimensions>,\n  id: 'stick',\n  lineStyle: '',\n  onClick: () => null,\n  posId: 'default',\n  type: 'stick',\n};\n\nexport const Positions: Record<PosType, StickPosition> = {\n  default: Default.customPos,\n  custom: {},\n  pointL: {\n    limbs: {...Default.customPos.limbs, arms: {left: {angle: [75, 15]}}},\n  },\n  pointR: {\n    limbs: {...Default.customPos.limbs, arms: {right: {angle: [75, 15]}}},\n  },\n  sitL: {\n    limbs: {\n      ...Default.customPos.limbs,\n      legs: {left: {angle: 90}, right: {angle: 90}},\n    },\n    offsets: {x: '0', y: '-3rem'},\n  },\n  walkL: {},\n  walkR: {},\n};\n","import React, {FC} from 'react';\n\nimport TextBubble from '../TextBubble';\n\nimport {Default, Positions} from './presets';\n\nimport {chainCall, chainClickable} from '@/hooks/chainClickable';\nimport './style.css';\nimport {anglesCSSProps, arbitraryCSSProps, multCss, rotateTransformCSSProp, stickCSSProps} from '@/util/css';\nimport {LimbAngleProps, StickProps, TextBubbleProps} from '@/util/types';\n\n// todo: move to props\nconst animated = false;\n\nconst Stick: FC<StickProps> = (props = Default) => {\n  const {bgColor, color, posId, customPos, dimensions, coord, childProps, lineStyle, onClick} = props;\n  const hasCustomPose = posId === 'custom' && customPos;\n  const {limbs, offsets} = !hasCustomPose ? Positions[posId ?? 'custom'] : customPos;\n  const {width, height, thickness} = {...Default.dimensions, ...dimensions};\n  const {base = 0, arms, legs} = {...Default.customPos.limbs, ...limbs};\n\n  const stickStyle = stickCSSProps({\n    width,\n    height,\n    thickness,\n    bgColor,\n    color,\n    base,\n    offsets,\n    coord,\n  });\n\n  const renderLimb = (p?: LimbAngleProps) => {\n    const angleProps = p?.angle;\n    // todo: fix animation when implemented or use @Property instead\n    const rotateTransform = animated && typeof angleProps === 'number' ? rotateTransformCSSProp(angleProps) : {};\n    const angleVariables = angleProps ? anglesCSSProps(angleProps, 'angle') : {};\n    return (\n      <div style={{...rotateTransform, ...angleVariables}}>\n        <div>\n          <div />\n        </div>\n      </div>\n    );\n  };\n\n  const bodyStyle = lineStyle === 'sketch' && thickness ? arbitraryCSSProps({['--t']: multCss(thickness, 1.75)}) : {};\n\n  return (\n    <div className={`${lineStyle ?? ''} stick`} style={stickStyle} onClick={chainCall(onClick)}>\n      <div className=\"head\"></div>\n      <div className=\"body\" style={bodyStyle}>\n        <div className=\"arms\">\n          {renderLimb(arms?.left)}\n          {renderLimb(arms?.right)}\n        </div>\n        <div className=\"legs\">\n          {renderLimb(legs?.left)}\n          {renderLimb(legs?.right)}\n        </div>\n      </div>\n      {childProps?.map((child, idx) => {\n        const {type} = child;\n        let ChildComponent = null;\n        switch (type) {\n          case 'stick':\n            ChildComponent = Stick;\n            return;\n          case 'text':\n            ChildComponent = TextBubble;\n            break;\n          default:\n            break;\n        }\n        return ChildComponent && <ChildComponent {...(child as TextBubbleProps)} key={`stickchild-${idx}`} />;\n      })}\n    </div>\n  );\n};\n\nexport default chainClickable(Stick);\n","import {StickPresets} from '@/components/Stick';\nimport {ComicProps} from '@/util/types';\n\nconst DEFAULT_COMIC_SIZE = '50vmin';\n\nexport const Default: Required<ComicProps> = {\n  childProps: [],\n  color: StickPresets.Default.color,\n  type: 'comic',\n  bgColor: 'transparent',\n  coord: {\n    x: '0',\n    y: '0',\n  },\n  dimensions: {\n    width: DEFAULT_COMIC_SIZE,\n    height: DEFAULT_COMIC_SIZE,\n    thickness: StickPresets.Default.dimensions.thickness,\n  },\n  id: '',\n  lineStyle: '',\n  onClick: () => null,\n  scenes: [],\n  layout: [],\n};\n","import {StickPresets} from '@/components/Stick';\nimport {divCss, offsetVar} from '@/util/css';\nimport {Coordinates, SceneProps} from '@/util/types';\n\nconst DEFAULT_SCENE_SIZE = '100%';\n\nexport const Default: Required<SceneProps> = {\n  childProps: [],\n  type: 'scene',\n  bgColor: 'transparent',\n  coord: {\n    x: '0',\n    y: '0',\n  },\n  color: StickPresets.Default.color,\n  dimensions: {\n    width: DEFAULT_SCENE_SIZE,\n    height: DEFAULT_SCENE_SIZE,\n    thickness: StickPresets.Default.dimensions.thickness,\n  },\n  id: '',\n  lineStyle: '',\n  onClick: () => null,\n  sticks: [],\n};\n\nconst H = 'h';\nconst W = 'w';\nconst OP = '0%';\n\nexport const Directions: Record<string, Coordinates> = {\n  C: {\n    x: divCss(offsetVar(W), 2),\n    y: divCss(offsetVar(H), 2),\n  },\n  SW: {\n    x: OP,\n    y: offsetVar(H),\n  },\n  W: {\n    x: OP,\n    y: divCss(offsetVar(H), 2),\n  },\n  NW: {\n    x: OP,\n    y: OP,\n  },\n  N: {\n    x: divCss(offsetVar(W), 2),\n    y: OP,\n  },\n  NE: {\n    x: offsetVar(W),\n    y: OP,\n  },\n  E: {\n    x: offsetVar(W),\n    y: divCss(offsetVar(H), 2),\n  },\n  SE: {\n    x: offsetVar(W),\n    y: offsetVar(H),\n  },\n  S: {\n    x: divCss(offsetVar(W), 2),\n    y: offsetVar(H),\n  },\n};\n","import React, {FC} from 'react';\n\nimport {Default} from './presets';\n\nimport './style.css';\nimport Stick from '@/components/Stick';\nimport {baseCSSProps} from '@/util/css';\nimport {SceneProps, StickProps} from '@/util/types';\nimport {chainClickable} from '@/hooks/chainClickable';\n\nconst Scene: FC<SceneProps> = ({bgColor, childProps, color, dimensions, lineStyle, sticks, onClick}) => {\n  const {width, height, thickness} = dimensions ?? Default.dimensions;\n\n  const sceneStyle = baseCSSProps({\n    width,\n    height,\n    thickness,\n    bgColor,\n    color,\n  });\n\n  return (\n    <div className={`${lineStyle ?? ''} scene`} style={sceneStyle} onClick={() => onClick()}>\n      {[...(childProps ?? []), ...(sticks ?? [])]\n        ?.filter(({type}) => type === 'stick')\n        .map(sp => ({bgColor, color, lineStyle, ...sp} as StickProps))\n        .map((stickProps, idx) => (\n          <Stick {...stickProps} onClick={onClick} key={`stick-${idx}-${stickProps.id}`} />\n        ))}\n    </div>\n  );\n};\n\nexport default chainClickable(Scene);\n","import React, {FC, useMemo} from 'react';\n\nimport {Default} from './presets';\n\nimport './style.css';\nimport Scene from '@/components/Scene';\nimport {baseCSSProps, divCss, multCss} from '@/util/css';\nimport {ComicProps} from '@/util/types';\nimport {chainClickable} from '@/hooks/chainClickable';\n\nconst Comic: FC<ComicProps> = ({bgColor, childProps, color, dimensions, layout, lineStyle, onClick, scenes}) => {\n  const {width, height, thickness} = dimensions ?? Default.dimensions;\n\n  const comicStyle = baseCSSProps({\n    width,\n    height,\n    thickness,\n    bgColor,\n    color,\n  });\n\n  const panels = useMemo(() => {\n    const normalized = layout\n      .map(r => {\n        const total = r.reduce((t, n) => t + n, 0);\n        return r.map(ogN => ogN / (total || 1));\n      })\n      .flat();\n\n    const sceneChildren = childProps?.filter(({type}) => type === 'scene');\n\n    return (\n      <div className=\"row\">\n        {normalized.map((nf, idx) => {\n          const sp = [...(sceneChildren ?? []), ...(scenes ?? [])][idx];\n          const normalizedProps = sp\n            ? {\n                bgColor,\n                color,\n                lineStyle,\n                ...sp,\n                dimensions: {\n                  thickness,\n                  ...sp.dimensions,\n                  width: multCss('100%', nf),\n                  height: divCss(dimensions?.height ?? '', layout.length || 1),\n                },\n              }\n            : undefined;\n          return normalizedProps && <Scene key={`scene-${idx}`} {...normalizedProps} onClick={onClick} />;\n        })}\n      </div>\n    );\n  }, [dimensions?.height, layout, scenes]);\n\n  return (\n    <div className={`${lineStyle ?? ''} comic`} style={comicStyle}>\n      {panels}\n    </div>\n  );\n};\n\nexport default chainClickable(Comic);\n"],"names":["chainClickable","Component","ClickableComponent","props","id","onClick","_jsx","childID","clickHandler","chainCall","fn","event","DEFAULT_SIZE","Default","multCss","css","f","divCss","offsetVar","varName","deg","angle","baseCSSProps","input","bgColor","color","width","height","thickness","anglesCSSProps","prefix","angles","result","idx","stickCSSProps","base","coord","offsets","_a","_b","_c","_d","textCSSProps","font","fontSize","fontWeight","borderColor","borderRadius","arbitraryCSSProps","TextBubble","dimensions","text","stickStyle","textStyle","bubbleStyle","TextBubble$1","DEFAULT_STICK_SIZE","Positions","Stick","posId","customPos","childProps","lineStyle","hasCustomPose","limbs","arms","legs","renderLimb","p","angleProps","rotateTransform","angleVariables","bodyStyle","_jsxs","child","type","ChildComponent","_createElement","Stick$1","DEFAULT_COMIC_SIZE","StickPresets.Default","DEFAULT_SCENE_SIZE","H","W","OP","Directions","Scene","sticks","sceneStyle","sp","stickProps","Scene$1","Comic","layout","comicStyle","panels","useMemo","normalized","r","total","t","n","ogN","sceneChildren","nf","scenes","normalizedProps","Comic$1"],"mappings":"6FAIO,SAAAA,EAAAC,EAAA,CACL,MAAAC,EAAAC,GAAA,CACE,KAAA,CAAM,GAAAC,EAACA,QAAAA,CAAIC,EAAAA,EAIX,OAAAC,EAAAL,EAAA,CAAiB,GAAAE,EAAKA,QAHtBI,GAAA,CACEF,GAAAA,EAAA,CAAAD,EAAAG,CAAA,EAAA,KAAA,GAAA,CAAA,CAAuD,CAEnBC,CAAAA,CAAgB,EAExDN,OAAAA,EAAAA,YAAAA,aAAAA,EAAAA,aAAAA,EAAAA,MAAAA,eACAA,CACF,CAEO,SAAAO,EAAAC,EAAA,CACL,OAAA,SAAAC,EAAA,CACEA,EAAAA,gBAAAA,EACAD,GAAI,CAER,4mBCnBA,MAAME,EAAe,OAERC,EAAqC,CAChD,WAAY,CAAC,EACb,KAAM,OACN,QAAS,cACT,MAAO,UACP,MAAO,CACL,EAAG,IACH,EAAG,GACL,EACA,WAAY,CACV,MAAOD,EACP,OAAQA,EACR,UAAW,KACb,EACA,GAAI,cACJ,UAAW,GACX,QAAS,IAAM,KACf,KAAM,GACN,KAAM,qCACN,SAAU,SACV,WAAY,SACZ,YAAa,cACb,aAAc,KAChB,ECbO,MAAME,EAAU,CAACC,EAAaC,IAAc,QAAQD,OAASC,KAOvDC,EAAS,CAACF,EAAaC,IAAc,QAAQD,OAASC,GAAK,KAM3DE,EAAaC,GAAoB,qBAAqBA,MAMtDC,EAAOC,GAAmB,GAAGA,GAAA,KAAAA,EAAS,OA2BtCC,EAAgBC,GAA4C,CACvE,KAAM,CAAC,QAAAC,EAAS,MAAAC,EAAO,MAAAC,EAAO,OAAAC,EAAQ,UAAAC,CAAa,EAAAL,EAC5C,MAAA,CACL,CAAC,OAAQG,EACT,CAAC,OAAQC,EACT,CAAC,OAAQC,EACT,CAAC,OAAQH,EACT,CAAC,SAAUD,CAAA,CAEf,EAQaK,EAAiB,CAACN,EAA+BO,IAAkC,CACxF,MAAAC,EAAS,OAAOR,GAAU,SAAW,CAACA,CAAK,EAAIA,EAAM,MAAM,EAAG,CAAC,EAC/DS,EAAwB,CAAA,EACvB,OAAAD,EAAA,QAAQ,CAACV,EAAeY,IAAgB,CACvC,MAAAd,EAAU,KAAKW,KAAUG,IAIxBD,EAAAb,GAAWC,EAAIC,CAAK,CAAA,CAC5B,EACMW,CACT,EAOaE,EAAiBX,GAA6C,aACnE,KAAA,CAAC,QAAAC,EAAS,MAAAC,EAAO,MAAAC,EAAO,OAAAC,EAAQ,UAAAC,EAAW,KAAAO,EAAM,MAAAC,EAAO,QAAAC,CAAW,EAAAd,EAClE,MAAA,CACL,GAAGD,EAAa,CAAC,QAAAE,EAAS,MAAAC,EAAO,MAAAC,EAAO,OAAAC,EAAQ,UAAAC,EAAU,EAC1D,GAAGC,EAAeM,GAAA,KAAAA,EAAQ,EAAG,MAAM,EACnC,IAAK,SAAQG,EAAAF,GAAA,YAAAA,EAAO,IAAP,KAAAE,EAAY,QAAOC,EAAAF,GAAA,YAAAA,EAAS,IAAT,KAAAE,EAAc,QAC9C,KAAM,SAAQC,EAAAJ,GAAA,YAAAA,EAAO,IAAP,KAAAI,EAAY,QAAOC,EAAAJ,GAAA,YAAAA,EAAS,IAAT,KAAAI,EAAc,OAAA,CAEnD,EAOaC,EAAgBnB,GAAoC,CAC/D,KAAM,CAAC,KAAAoB,EAAM,SAAAC,EAAU,WAAAC,EAAY,YAAAC,EAAa,aAAAC,CAAgB,EAAAxB,EACzD,MAAA,CACL,CAAC,OAAQoB,EACT,CAAC,QAASC,EACV,CAAC,QAASC,EACV,CAAC,QAASC,EACV,CAAC,QAASC,CAAA,CAEd,EAOaC,EAAqBzB,GACzBA,ECrHT0B,EAAA,CAAA9C,EAAAU,IAAA,CACE,KAAA,CAAM,KAAA8B,EAACA,SAAAA,EAAMC,WAAAA,EAAUC,QAAAA,EAAYrB,YAAAA,EAASsB,aAAAA,EAAaC,MAAAA,EAActB,WAAAA,EAAOyB,MAAAA,EAAYd,KAAAA,EAAOe,QAAAA,CAAM9C,EAAAA,EAEvG,CAAM,MAAAqB,EAACA,OAAAA,EAAOC,UAAAA,CAAQC,EAAAA,CAAa,GAAAf,EAAA,WAAYqC,GAAAA,CAAeA,EAE9DE,EAAAlB,EAAA,CAAiC,MAAAR,EAC/BA,OAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAJ,MAAAA,EACAC,MAAAA,CACAW,CAAAA,EAEFiB,EAAAX,EAAA,CAA+B,KAAAC,EAC7BA,SAAAA,EACAC,WAAAA,EACAC,YAAAA,EACAC,aAAAA,CACAC,CAAAA,EAEFO,EAAA,CAAoB,GAAAF,EACfA,GAAAA,CACAC,EAGL,OAAA/C,EAAA,MAAA,CACE,UAAA,SAAe,MAAAgD,EAAgBA,QAAAA,EAAAA,CAAAA,EAAuC,SAAAhD,EAAA,MAAA,CACpE,UAAA,OAAe,SAAA6C,GAAA,KAAAA,EAAA,EAAgB,CAAA,CAAE,CAAA,CAGvC,EAEAI,EAAAvD,EAAAiD,CAAA,q2DCxCA,MAAMO,EAAqB,QAEd3C,EAAgC,CAC3C,WAAY,CAAC,EACb,SAAU,CAAC,EACX,QAAS,cACT,MAAO,UACP,MAAO,CACL,EAAG,IACH,EAAG,GACL,EACA,UAAW,CACT,MAAO,CACL,KAAM,EACR,CACF,EACA,WAAY,CACV,MAAO2C,EACP,OAAQA,EACR,UAAW,KACb,EACA,GAAI,QACJ,UAAW,GACX,QAAS,IAAM,KACf,MAAO,UACP,KAAM,OACR,EAEaC,GAA4C,CACvD,QAAS5C,EAAQ,UACjB,OAAQ,CAAC,EACT,OAAQ,CACN,MAAO,CAAC,GAAGA,EAAQ,UAAU,MAAO,KAAM,CAAC,KAAM,CAAC,MAAO,CAAC,GAAI,EAAE,GAAG,CACrE,EACA,OAAQ,CACN,MAAO,CAAC,GAAGA,EAAQ,UAAU,MAAO,KAAM,CAAC,MAAO,CAAC,MAAO,CAAC,GAAI,EAAE,GAAG,CACtE,EACA,KAAM,CACJ,MAAO,CACL,GAAGA,EAAQ,UAAU,MACrB,KAAM,CAAC,KAAM,CAAC,MAAO,EAAE,EAAG,MAAO,CAAC,MAAO,GAAG,CAC9C,EACA,QAAS,CAAC,EAAG,IAAK,EAAG,OAAO,CAC9B,EACA,MAAO,CAAC,EACR,MAAO,CAAC,CACV,EClCA,MAAA6C,EAAA,CAAAvD,EAAAU,IAAA,CACE,KAAA,CAAM,QAAAW,EAACA,MAAAA,EAASC,MAAAA,EAAOkC,UAAAA,EAAOC,WAAAA,EAAWV,MAAAA,EAAYd,WAAAA,EAAOyB,UAAAA,EAAYC,QAAAA,CAAWzD,EAAAA,EACnF0D,EAAAJ,IAAA,UAAAC,EACA,CAAM,MAAAI,EAACA,QAAAA,CAAO3B,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,KAAAA,EAAAA,UACd,CAAM,MAAAX,EAACA,OAAAA,EAAOC,UAAAA,CAAQC,EAAAA,CAAa,GAAAf,EAAA,WAAYqC,GAAAA,CAAeA,EAC9D,CAAM,KAAAf,EAAA,EAAQ,KAAA8B,EAAGA,KAAAA,CAAMC,EAAAA,CAAQ,GAAArD,EAAA,UAAA,MAAsBmD,GAAAA,CAAUA,EAE/DZ,EAAAlB,EAAA,CAAiC,MAAAR,EAC/BA,OAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAJ,MAAAA,EACAC,KAAAA,EACAU,QAAAA,EACAE,MAAAA,CACAD,CAAAA,EAGF+B,EAAAC,GAAA,CACE,MAAAC,EAAAD,GAAA,YAAAA,EAAA,MAEAE,EAAA,CAAA,EACAC,EAAAF,EAAAxC,EAAAwC,EAAA,OAAA,EAAA,GACA,OAAA/D,EAAA,MAAA,CACE,MAAA,CAAY,GAAAgE,EAAIA,GAAAA,CAAoBC,EAAc,SAAAjE,EAAA,MAAA,CAChD,SAAAA,EAAA,MAAA,EAAA,CACE,CAAA,CAAO,CAAA,CAEL,EAIVkE,EAAAV,IAAA,UAAAlC,EAAAoB,EAAA,CAA0E,CAAA,OAAAlC,EAAAc,EAAA,IAAA,CAAiC,CAAA,EAAA,CAAA,EAE3G,OAAA6C,EAAA,MAAA,CACE,UAAA,GAAAX,GAAA,KAAAA,EAAA,WAAgC,MAAAV,EAAmBA,QAAAA,EAAAA,CAAAA,EAAsC,SAAA,CAAA9C,EAAA,MAAA,CACvF,UAAA,MAAe,CAAA,EAAAmE,EAAA,MAAA,CACf,UAAA,OAAe,MAAAD,EAAcA,SAAAA,CAAAA,EAAAA,MAAAA,CAC3B,UAAA,OAAe,SAAA,CAAAL,EAAAF,GAAA,YAAAA,EAAA,IAAA,EAAAE,EAAAF,GAAA,YAAAA,EAAA,KAAA,CAAA,CAEW,CAAA,EAAAQ,EAAA,MAAA,CAE1B,UAAA,OAAe,SAAA,CAAAN,EAAAD,GAAA,YAAAA,EAAA,IAAA,EAAAC,EAAAD,GAAA,YAAAA,EAAA,KAAA,CAAA,CAEW,CAAA,CAAA,CACpB,CAAA,EAAAL,GAAA,YAAAA,EAAA,IAAA,CAAAa,EAAAzC,IAAA,CAGN,KAAA,CAAM,KAAA0C,CAACA,EAAAA,EACP,IAAAC,EAAA,KACA,OAAAD,EAAA,CAAY,IAAA,QAERC,EAAAA,EACA,OAAA,IAAA,OAEAA,EAAAA,EACA,KAEA,CAEJ,OAAAA,GAAAC,EAAA,QAAA,cAAAD,EAAA,CAAwC,GAAAF,EAAMA,IAAAA,cAAAA,GAA8CzC,CAAAA,CAAS,EAAA,CACrG,CAAA,CAGR,EAEA6C,GAAA9E,EAAA0D,CAAA,utDC7EA,MAAMqB,EAAqB,SAEdlE,GAAgC,CAC3C,WAAY,CAAC,EACb,MAAOmE,EAAqB,MAC5B,KAAM,QACN,QAAS,cACT,MAAO,CACL,EAAG,IACH,EAAG,GACL,EACA,WAAY,CACV,MAAOD,EACP,OAAQA,EACR,UAAWC,EAAqB,WAAW,SAC7C,EACA,GAAI,GACJ,UAAW,GACX,QAAS,IAAM,KACf,OAAQ,CAAC,EACT,OAAQ,CAAC,CACX,ECpBA,MAAMC,EAAqB,OAEdpE,GAAgC,CAC3C,WAAY,CAAC,EACb,KAAM,QACN,QAAS,cACT,MAAO,CACL,EAAG,IACH,EAAG,GACL,EACA,MAAOmE,EAAqB,MAC5B,WAAY,CACV,MAAOC,EACP,OAAQA,EACR,UAAWD,EAAqB,WAAW,SAC7C,EACA,GAAI,GACJ,UAAW,GACX,QAAS,IAAM,KACf,OAAQ,CAAC,CACX,EAEME,EAAI,IACJC,EAAI,IACJC,EAAK,KAEEC,GAA0C,CACrD,EAAG,CACD,EAAGpE,EAAOC,EAAUiE,CAAC,EAAG,CAAC,EACzB,EAAGlE,EAAOC,EAAUgE,CAAC,EAAG,CAAC,CAC3B,EACA,GAAI,CACF,EAAGE,EACH,EAAGlE,EAAUgE,CAAC,CAChB,EACA,EAAG,CACD,EAAGE,EACH,EAAGnE,EAAOC,EAAUgE,CAAC,EAAG,CAAC,CAC3B,EACA,GAAI,CACF,EAAGE,EACH,EAAGA,CACL,EACA,EAAG,CACD,EAAGnE,EAAOC,EAAUiE,CAAC,EAAG,CAAC,EACzB,EAAGC,CACL,EACA,GAAI,CACF,EAAGlE,EAAUiE,CAAC,EACd,EAAGC,CACL,EACA,EAAG,CACD,EAAGlE,EAAUiE,CAAC,EACd,EAAGlE,EAAOC,EAAUgE,CAAC,EAAG,CAAC,CAC3B,EACA,GAAI,CACF,EAAGhE,EAAUiE,CAAC,EACd,EAAGjE,EAAUgE,CAAC,CAChB,EACA,EAAG,CACD,EAAGjE,EAAOC,EAAUiE,CAAC,EAAG,CAAC,EACzB,EAAGjE,EAAUgE,CAAC,CAChB,CACF,ECzDA,MAAAI,EAAA,CAAA,CAA+B,QAAA9D,EAACA,WAAAA,EAASqC,MAAAA,EAAYpC,WAAAA,EAAOyB,UAAAA,EAAYY,OAAAA,EAAWyB,QAAAA,CAAe,IAAA,CAChG,KAAA,CAAM,MAAA7D,EAACA,OAAAA,EAAOC,UAAAA,CAAQC,EAAAA,GAAAA,KAAAA,EAAAA,GAAAA,WAEtB4D,EAAAlE,EAAA,CAAgC,MAAAI,EAC9BA,OAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAJ,MAAAA,CACAC,CAAAA,EAGF,OAAAnB,EAAA,MAAA,CACE,UAAA,GAAAwD,GAAA,KAAAA,EAAA,WAAgC,MAAA0B,EAAmBA,QAAAA,IAAAA,EAAAA,EAAqC,SAAA,CAAA,GAAA3B,GAAA,KAAAA,EAAA,CAAA,EAAA,GAAA0B,GAAA,KAAAA,EAAA,CAAA,CAAA,EAAA,OAAA,CAAA,CAE1E,KAAAZ,CAACA,IAAAA,IAAAA,OAAAA,EAAAA,IAAAA,IAAAA,CACC,QAAAnD,EAACA,MAAAA,EAASC,UAAAA,EAAOqC,GAAAA,CAAc2B,EAAAA,EAAAA,IAAAA,CAAAA,EAAAA,IAAAA,EAAAA,QAAAA,cAAAA,GAAAA,CAEnC,GAAAC,EAAKA,QAAAA,EAAY,IAAA,SAAAzD,KAAAyD,EAAA,IAAkDtF,CAAAA,CAAAA,CAC1E,CAAA,CAGT,EAEAuF,GAAA3F,EAAAsF,CAAA,+4CCvBA,MAAAM,EAAA,CAAA,CAA+B,QAAApE,EAACA,WAAAA,EAASqC,MAAAA,EAAYpC,WAAAA,EAAOyB,OAAAA,EAAY2C,UAAAA,EAAQ/B,QAAAA,EAAWzD,OAAAA,CAAe,IAAA,CACxG,KAAA,CAAM,MAAAqB,EAACA,OAAAA,EAAOC,UAAAA,CAAQC,EAAAA,GAAAA,KAAAA,EAAAA,GAAAA,WAEtBkE,EAAAxE,EAAA,CAAgC,MAAAI,EAC9BA,OAAAA,EACAC,UAAAA,EACAC,QAAAA,EACAJ,MAAAA,CACAC,CAAAA,EAGFsE,EAAAC,EAAAA,QAAAA,QAAA,IAAA,CACE,MAAAC,EAAAJ,EAAA,IAAAK,GAAA,CAEI,MAAAC,EAAAD,EAAA,OAAA,CAAAE,EAAAC,IAAAD,EAAAC,EAAA,CAAA,EACA,OAAAH,EAAA,IAAAI,GAAAA,GAAAH,GAAA,EAAA,CAAsC,CAAA,EAAA,KAAA,EAI1CI,EAAA1C,GAAA,YAAAA,EAAA,OAAA,CAAA,CAA0C,KAAAc,CAACA,IAAAA,IAAAA,SAE3C,OAAArE,EAAA,MAAA,CACE,UAAA,MAAe,SAAA2F,EAAA,IAAA,CAAAO,EAAAvE,IAAA,OAEX,MAAAwD,EAAA,CAAA,GAAAc,GAAA,KAAAA,EAAA,CAAA,EAAA,GAAAE,GAAA,KAAAA,EAAA,CAAA,CAAA,EAAAxE,GACAyE,EAAAjB,EAAA,CACI,QAAAjE,EACEA,MAAAA,EACAC,UAAAA,EACAqC,GAAAA,EACG2B,WAAAA,CACS,UAAA7D,EACVA,GAAAA,EAAAA,WACMsB,MAAAA,EAAAA,OAAAA,CAAAA,EACmB,OAAAjC,GAAAqB,EAAAY,GAAA,YAAAA,EAAA,SAAA,KAAAZ,EAAA,GAAAuD,EAAA,QAAA,CAAA,CACkC,CAC7D,EAAA,OAGN,OAAAa,GAAApG,EAAAgF,GAAA,CAAgC,GAAAoB,EAA0BA,QAAAA,CAAiB,EAAA,SAAAzE,GAAA,CAAvB,CAAA,CACrD,CAAA,CACG,EAAA,CAAAiB,GAAA,YAAAA,EAAA,OAAA2C,EAAAY,CAAA,CAAA,EAIV,OAAAnG,EAAA,MAAA,CACE,UAAA,GAAAwD,GAAA,KAAAA,EAAA,WAAgC,MAAAgC,EAAmBA,SAAAA,CAChDC,CAAAA,CAGP,EAEAY,GAAA3G,EAAA4F,CAAA"}